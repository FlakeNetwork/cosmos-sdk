syntax = "proto3";
package cosmos.tx.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/abci/v1beta1/abci.proto";
import "cosmos/tx/v1beta1/tx.proto";

option go_package = "github.com/cosmos/cosmos-sdk/types/tx";

// Service defines a gRPC service for interacting with transactions.
service Service {
    // Simulate simulates executing a transaction for estimating gas usage.
    rpc Simulate(SimulateRequest) returns (SimulateResponse) {
        option (google.api.http).post = "/cosmos/tx/v1beta1/simulate";
    }
    // GetTx fetches a tx by hash.
    rpc GetTx(GetTxRequest) returns (TxResponse) {
        option (google.api.http).get = "/cosmos/tx/v1beta1/tx/{hash}";
    }

    // TxsByEvents fetches txs by event.
    rpc TxsByEvents(GetTxsEventRequest) returns (TxsByEventsResponse) {
        option (google.api.http).get = "/cosmos/tx/v1beta1/txs";
    }
}

// GetTxsEventRequest is the request type for the Service.TxsByEvents
// RPC method.
message GetTxsEventRequest {

    // event is the transaction event type.
    string event = 1;

    // page is the page number
    int64 page = 2;

    // limit defines per page limit
    int64 limit = 3;
}

// TxsByEventsResponse is the response type for the Service.TxsByEvents
// RPC method.
message TxsByEventsResponse {
    // txs is the list of queried transactions.
    repeated TxResponse txs = 1;
}

// TxResponse defines a structure containing relevant tx data and metadata.
message TxResponse {
    option (gogoproto.goproto_getters) = false;
    // The block height
    int64 height = 1;
    // The transaction hash.
    string txhash = 2 [(gogoproto.customname) = "TxHash"];
    // Namespace for the Code
    string codespace = 3;
    // Response code.
    uint32 code = 4;
    // tx is the queried transaction.
    cosmos.tx.v1beta1.Tx tx = 5;
    // The output of the application's logger (raw string). May be
    // non-deterministic.
    string raw_log = 6;
    // Additional information. May be non-deterministic.
    string info = 7;
    // Amount of gas requested for transaction.
    int64 gas_wanted = 8;
    // Amount of gas consumed by transaction.
    int64 gas_used = 9;
}

// SimulateRequest is the request type for the Service.Simulate
// RPC method.
message SimulateRequest {
    // tx is the transaction to simulate.
    cosmos.tx.v1beta1.Tx tx = 1;
}
  
// SimulateResponse is the response type for the
// Service.SimulateRPC method.
message SimulateResponse {
    // gas_info is the information about gas used in the simulation.
    cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
    // result is the result of the simulation.
    cosmos.base.abci.v1beta1.Result result = 2;
}

// GetTx is the request type for the Service.GetTx
// RPC method.
message GetTxRequest {
    // hash is the tx hash to query, encoded as a hex string.
   string hash = 1;
}
